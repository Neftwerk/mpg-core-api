name: CI workflow

on:
  push:
    branches: ['main', 'staging']
  pull_request:
    branches: ['*']

jobs:
  test:
    permissions: write-all # for Report LCOV to work

    runs-on: ubuntu-latest

    env:
      PORT: 5000
      DB_HOST: localhost
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: 123456
      DB_NAME: db_test
      COGNITO_USER_POOL_ID: local_0tm1eyyS # Mocked, can be any value that complies with the amazon-cognito-identity-js library
      COGNITO_CLIENT_ID: dy84cymh67njie4bdru9g3rk2 # Mocked, can be any value that complies with the amazon-cognito-identity-js library
      COGNITO_ISSUER: http://localhost:9229/local_0tm1eyyS # Mocked, can be any value that complies with the amazon-cognito-identity-js library
      COGNITO_ENDPOINT: http://localhost:9229 # Mocked, can be any value that complies with the amazon-cognito-identity-js library
      BASE_APP_URL: http://localhost:9229/api/v1 # Mocked, can be any value but it must contain /api/v1
      AUTH_ALLOWED_EMAIL_DOMAINS: ${{ secrets.AUTH_ALLOWED_EMAIL_DOMAINS }}
      STELLAR_LOCAL_URL: http://localhost:8000
      STELLAR_LOCAL_NETWORK_PASSPHRASE: Standalone Network ; February 2017
      STELLAR_SERVER_URL: https://horizon-testnet.stellar.org
      STELLAR_NETWORK_PASSPHRASE: Test SDF Network ; September 2015
      STELLAR_ORGANIZATION_PUBLIC_KEY_SPONSOR_ACCOUNT: ${{ secrets.STELLAR_ORGANIZATION_PUBLIC_KEY_SPONSOR_ACCOUNT }}
      STELLAR_ORGANIZATION_SECRET_KEY_SPONSOR_ACCOUNT: ${{ secrets.STELLAR_ORGANIZATION_SECRET_KEY_SPONSOR_ACCOUNT }}
      STELLAR_ORGANIZATION_PUBLIC_KEY_SPONSOR_TRUSTLINES: ${{ secrets.STELLAR_ORGANIZATION_PUBLIC_KEY_SPONSOR_TRUSTLINES }}
      STELLAR_ORGANIZATION_SECRET_KEY_SPONSOR_TRUSTLINES: ${{ secrets.STELLAR_ORGANIZATION_SECRET_KEY_SPONSOR_TRUSTLINES }}
      STELLAR_INITIAL_XLM_BALANCE_OF_SPONSORED_ACCOUNT: 3
      USDC_ASSET_ISSUER: ${{ secrets.USDC_ASSET_ISSUER }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: NPM or Yarn install with caching
        uses: bahmutov/npm-install@v1.6.0

      - name: Start Stellar service
        run: |
          docker run -d \
            --name stellar \
            -p 8000:8000 \
            stellar/quickstart:soroban-dev \
            --local --enable-soroban-rpc

      - name: Wait for Stellar to be ready
        run: |
          echo "Waiting for Stellar to start..."
          for i in {1..30}; do
            if nc -z localhost 8000; then
              echo "Stellar is up!"
              break
            fi
            echo "Waiting for Stellar..."
            sleep 2
          done

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1
        with:
          ref: v1.14

      - name: Build and test with coverage
        run: npm run test:cov

      - name: Report LCOV
        uses: zgosalvez/github-actions-report-lcov@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          coverage-files: ./coverage/lcov.info

      - name: Store coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  scan:
    needs: test

    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage

      - name: Scan with Sonarqube
        uses: sonarsource/sonarqube-scan-action@master

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
